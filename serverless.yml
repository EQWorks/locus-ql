service: locus-ql

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  timeout: 30
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-serverlessdeploymentbucket
    serverSideEncryption: AES256
  environment:
    STAGE: ${self:provider.stage}
    PG_HOST: ${env:PG_HOST}
    PG_HOST_ML: ${env:PG_HOST_ML}
    PG_PORT: 5432
    PG_DB: ${env:PG_DB}
    PG_USER: ${env:PG_USER}
    PG_PW: ${env:PG_PW}
    PG_ATOM_HOST: ${env:PG_ATOM_HOST}
    PG_ATOM_HOST_READ: ${env:PG_ATOM_HOST_READ}
    PG_ATOM_PORT: 5432
    PG_ATOM_DB: ${env:PG_ATOM_DB}
    PG_ATOM_USER: ${env:PG_ATOM_USER}
    PG_ATOM_PW: ${env:PG_ATOM_PW}
    KEY_WARDEN_HOST: ${env:KEY_WARDEN_HOST}
    KEY_WARDEN_STAGE: ${env:KEY_WARDEN_STAGE}
    API_VER: ${env:API_VER}
    API_GATEWAY_BASE_PATH: ${self:provider.stage}
    ML_SCHEMA: ${env:ML_SCHEMA}
    ML_EXECUTION_BUCKET: ${env:ML_EXECUTION_BUCKET}
    ML_QUERY_BUCKET: ${env:ML_QUERY_BUCKET}
    ML_LAMBDA_EXECUTOR_ARN: ${env:ML_LAMBDA_EXECUTOR_ARN}
    SENTRY_DNS: ${env:SENTRY_DNS}
    REDIS_URL:
      # cloudformation functions to form redis://<host>:<port>
      "Fn::Join": [
        "",
        [
          "redis://",
          "Fn::Join": [
            ":",
            [
              "Fn::GetAtt": [LocusQLRedisCluster, RedisEndpoint.Address],
              "Fn::GetAtt": [LocusQLRedisCluster, RedisEndpoint.Port]
            ]
          ]
        ]
      ]
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
          - lambda:InvokeFunctionConfiguration
          - lambda:GetFunction
          - lambda:GetFunctionConfiguration
          - s3:PutObject
          - s3:ListBucket
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:ListBucket
          - s3:GetObject
          - s3:PutObject
        Resource:
          - arn:aws:s3:::ml-query-cache
          - arn:aws:s3:::ml-query-cache/*
          - arn:aws:s3:::ml-query-cache-dev
          - arn:aws:s3:::ml-query-cache-dev/*
          - arn:aws:s3:::ml-execution-cache
          - arn:aws:s3:::ml-execution-cache/*
          - arn:aws:s3:::ml-execution-cache-dev
          - arn:aws:s3:::ml-execution-cache-dev/*
          - arn:aws:s3:::locus-api-cache-${self:provider.stage}
          - arn:aws:s3:::locus-api-cache-${self:provider.stage}/*
          - arn:aws:s3:::locus-ql-${self:provider.stage}-serverlessdeploymentbucket
          - arn:aws:s3:::locus-ql-${self:provider.stage}-serverlessdeploymentbucket/*

  vpc: # vpc-70658509 | EQ-DC-Tunnel
    securityGroupIds:
      - sg-081b437d # api-gateway-dc
    subnetIds:
      - subnet-b59ae9fe # EQ-DC-Lambda Public 1A
      - subnet-df12bb82 # EQ-DC-Lambda Public 1B

functions:
  app:
    handler: src/serverless.handler
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-firstorder-token
              - eq-api-jwt
              - eq-api-call-timestamp
              - X-EQ-Product
            allowCredentials: false
      - http:
          path: '{proxy+}'
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-firstorder-token
              - eq-api-jwt
              - eq-api-call-timestamp
              - X-EQ-Product
            allowCredentials: false
          authorizer:
            type: token
            managedExternally: false
            identitySource: method.request.header.eq-api-jwt
            resultTtlInSeconds: 300 # 5 mins
            arn: ${env:AUTHORIZER_ARN}
  mlExecutor:
    handler: src/ml/executions.executionHandler
    # 15-min timeout
    timeout: 900
    tags:
      service: locus-ql
  mlScheduleJobRunner:
    handler: src/ml/schedules/jobs.scheduleJobHandler
    timeout: 60
    tags:
      service: locus-ql

plugins:
  - serverless-offline
  - serverless-deployment-bucket

resources:
  Resources:
    # redis resource configured through cloudformation, without explicit manual work
    LocusQLRedisCluster:
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        ClusterName: ${self:service}-${env:REDIS_STAGE}
        AutoMinorVersionUpgrade: true
        CacheNodeType: cache.t2.micro
        Engine: redis
        NumCacheNodes: 1
        # this equates to the provider.vpc.subnetIds
        CacheSubnetGroupName: redis-public-lambda
        VpcSecurityGroupIds:
          - sg-52345126
    UnauthorizedResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: ApiGatewayRestApi # implied resource created by serverless
        StatusCode: '401'
    AccessDeniedResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: ApiGatewayRestApi # implied resource created by serverless
        StatusCode: '403'
    ExpiredfTokenResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: ApiGatewayRestApi # implied resource created by serverless
        StatusCode: '403'

custom:
  serverless-offline:
    noPrependStageInUrl: true
    printOutput: true

  deploymentBucket:
    versioning: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}
